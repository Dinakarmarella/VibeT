"""
The Orchestrator module for the Automated Content Agent.

This module is the central coordinator, responsible for managing the workflow
by calling the appropriate Fetcher, Processor, and Publisher modules.
"""

import yaml

# Local imports
from .state_manager import StateManager
from .fetcher import Fetcher
from .processor import Processor
from .publisher import Publisher

class Orchestrator:
    """The main coordinator of the agent."""

    def __init__(self, config_path: str):
        """
        Initializes the Orchestrator with settings from a config file.

        Args:
            config_path: Path to the YAML configuration file.
        """
        print("Orchestrator: Initializing...")
        try:
            with open(config_path, 'r') as f:
                self.config = yaml.safe_load(f)
        except FileNotFoundError:
            print(f"Orchestrator: Error - Configuration file not found at '{config_path}'. Please copy config.yaml.template to config.yaml and fill it out.")
            exit()
        
        # Initialize other modules
        self.state_manager = StateManager(self.config.get('system', {}).get('database_path', 'agent_state.db'))
        self.fetcher = Fetcher(self.config, self.state_manager)
        self.processor = Processor(self.config.get('processor', {}))
        self.publisher = Publisher(self.config.get('publisher', {}), self.config.get('api_keys', {}))
        print("Orchestrator: Configuration and modules loaded.")

    def execute_task(self, task_name: str):
        """
        Executes a specific task defined in the configuration.

        Args:
            task_name: The name of the task to execute (e.g., 'daily_youtube_summary').
        """
        print(f"Orchestrator: Starting task '{task_name}'...")
        
        if task_name == 'daily_youtube_summary':
            self.run_youtube_summary_flow()
        else:
            print(f"Orchestrator: Error - Task '{task_name}' not recognized.")
            
        print(f"Orchestrator: Task '{task_name}' finished.")

    def run_youtube_summary_flow(self):
        """
        Runs the full workflow for fetching, processing, and publishing YouTube summaries.
        """
        print("Orchestrator: Running YouTube summary workflow...")
        
        # 1. Fetch new videos
        new_videos = self.fetcher.get_new_youtube_videos()
        
        if not new_videos:
            print("Orchestrator: No new videos found. Workflow finished.")
            return

        print(f"Orchestrator: Found {len(new_videos)} new videos to process.")

        # 2. Process each video
        for video in new_videos:
            print(f"Orchestrator: Processing video '{video['title']}'...")
            summary = self.processor.summarize(video['description'])
            
            if summary:
                # 3. Publish the summary
                print(f"Orchestrator: Publishing summary for '{video['title']}'...")
                success = self.publisher.post(summary=summary, trends="Generated by AI") # Placeholder for trends
                
                # 4. Update state
                if success:
                    print(f"Orchestrator: Successfully published summary for '{video['title']}'.")
                    self.state_manager.mark_as_processed(video['id'], source=video['source'], status='published')
                else:
                    print(f"Orchestrator: Failed to publish summary for '{video['title']}'. Will retry on next run.")
            else:
                print(f"Orchestrator: Failed to summarize video '{video['title']}'.")
        
        print("Orchestrator: YouTube summary workflow complete.")

